name: Release Single Module

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Module to release (e.g., container, client, config, context, image, network, volume)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run without creating tags or pushing changes'
        required: false
        default: true
        type: boolean
      bump_type:
        description: 'Type of version bump to perform'
        required: false
        default: 'prerelease'
        type: choice
        options:
          - prerelease
          - patch
          - minor
          - major

jobs:
  release-module:
    # Additional safety check - only run on main branch
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0  # Fetch all history and tags
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify branch
      run: |
        if [[ "${{ github.ref_name }}" != "main" ]]; then
          echo "‚ùå Releases can only be performed from the main branch"
          echo "Current branch: ${{ github.ref_name }}"
          exit 1
        fi
        echo "‚úÖ Running release from main branch"

    - name: Set up Go
      uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
      with:
        go-version-file: 'go.work'

    - name: Configure Git
      if: ${{ !inputs.dry_run }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Validate module
      run: |
        # Get list of modules from go.work
        AVAILABLE_MODULES=$(go work edit -json | jq -r '.Use[].DiskPath' | sed 's|^\./||')

        # Check if the requested module exists
        if ! echo "$AVAILABLE_MODULES" | grep -q "^${{ inputs.module }}$"; then
          echo "‚ùå Error: Module '${{ inputs.module }}' not found in go.work"
          echo ""
          echo "Available modules:"
          echo "$AVAILABLE_MODULES" | sed 's/^/  - /'
          exit 1
        fi

        echo "‚úÖ Module '${{ inputs.module }}' is valid"

    - name: Display run configuration
      run: |
        echo "üöÄ Release Configuration:"
        echo "  - Module: ${{ inputs.module }}"
        echo "  - Dry Run: ${{ inputs.dry_run }}"
        echo "  - Bump Type: ${{ inputs.bump_type }}"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Branch: ${{ github.ref_name }}"

    - name: Prepare release for module
      env:
        DRY_RUN: ${{ inputs.dry_run }}
        BUMP_TYPE: ${{ inputs.bump_type }}
        LOCAL_RELEASE: false
      working-directory: "${{ inputs.module }}"
      run: |
        echo "Preparing release for module: ${{ inputs.module }}"
        make pre-release

    - name: Finalize release for module
      env:
        DRY_RUN: ${{ inputs.dry_run }}
        LOCAL_RELEASE: false
      working-directory: "${{ inputs.module }}"
      run: |
        echo "Finalizing release for module: ${{ inputs.module }}"
        make release

        if [[ "${{ inputs.dry_run }}" == "true" ]]; then
          echo "‚úÖ Dry run release completed successfully for ${{ inputs.module }}!"
          echo "No changes were made to the repository."
        else
          echo "‚úÖ Release completed successfully for ${{ inputs.module }}!"
          echo "Module has been updated, tag has been created and Go proxy has been updated"
        fi
